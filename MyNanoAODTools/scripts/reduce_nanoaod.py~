#!/usr/bin/env python3

import ROOT
import argparse

def reduce_nanoaod(input_file, output_file):
    """
    Reduce a CMS NanoAOD file by selecting electrons and muons with basic filtering.

    Args:
        input_file (str): Path to the input NanoAOD file (supports xrootd).
        output_file (str): Path to the output reduced NanoAOD file.
    """

    # Open the NanoAOD file using RDataFrame
    df = ROOT.RDataFrame("Events", input_file)

    # Define selection criteria
    selection = "(Sum(Muon_pt > 10) > 0) || (Sum(Electron_pt > 10) > 0)"
    
    # Apply event selection
    df = df.Filter(selection)

    # List of branches to keep (muons and electrons)
    branches = [
        "run", "luminosityBlock", "event",
        "Muon_pt", "Muon_eta", "Muon_phi", "Muon_charge", "Muon_mass",
        "Muon_pfRelIso04_all", "Muon_tightId",
        "Electron_pt", "Electron_eta", "Electron_phi", "Electron_charge", "Electron_mass",
        "Electron_cutBased", "Electron_pfRelIso03_all",
        "MET_pt", "MET_phi"  # Keep MET for event-level selection
    ]

    # Save reduced file
    df.Snapshot("Events", output_file, branches)

    print(f"âœ… Reduced NanoAOD file saved: {output_file}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Reduce a CMS NanoAOD file for muons and electrons.")
    parser.add_argument("input", help="Path to the input NanoAOD file (xrootd supported)")
    parser.add_argument("output", help="Path to the output reduced NanoAOD file")

    args = parser.parse_args()
    
    reduce_nanoaod(args.input, args.output)
